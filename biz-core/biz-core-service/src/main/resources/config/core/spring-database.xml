<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
       default-autowire="byName" >

    <bean id="b2cDataSource"
          class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://${db.btoc}:3306/b2c?useUnicode=true&amp;characterEncoding=gbk&amp;autoReconnect=true&amp;noAccessToProcedureBodies=true&amp;zeroDateTimeBehavior=convertToNull"/>
        <property name="username" value="coo8new"/>
        <property name="password" value="yhd,123"/>
        <!--maxActive: 最大连接数量-->
        <property name="maxActive" value="72"/>
        <!--minIdle: 最小空闲连接-->
        <property name="minIdle" value="24"/>
        <!--maxIdle: 最大空闲连接-->
        <property name="maxIdle" value="30"/>
        <!--initialSize: 初始化连接-->
        <property name="initialSize" value="24"/>
        <!-- 连接被泄露时是否打印 -->
        <property name="logAbandoned" value="true"/>
        <!--removeAbandoned: 是否自动回收超时连接-->
        <property name="removeAbandoned"  value="true"/>
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->
        <property name="removeAbandonedTimeout" value="100"/>
        <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->
        <property name="maxWait" value="1000"/>
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="10"/>
        <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->
        <property name="minEvictableIdleTimeMillis" value="10000"/>
        <property name="validationQuery" value="SELECT NOW() FROM DUAL"/>
    </bean>

    <bean id="statDataSource"
          class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://${db.stat}:3306/stat?useUnicode=true&amp;characterEncoding=gbk&amp;autoReconnect=true&amp;noAccessToProcedureBodies=true&amp;zeroDateTimeBehavior=convertToNull"/>
        <property name="username" value="coo8new"/>
        <property name="password" value="yhd,123"/>
        <!--maxActive: 最大连接数量-->
        <property name="maxActive" value="10"/>
        <!--minIdle: 最小空闲连接-->
        <property name="minIdle" value="2"/>
        <!--maxIdle: 最大空闲连接-->
        <property name="maxIdle" value="6"/>
        <!--initialSize: 初始化连接-->
        <property name="initialSize" value="2"/>
        <!-- 连接被泄露时是否打印 -->
        <property name="logAbandoned" value="true"/>
        <!--removeAbandoned: 是否自动回收超时连接-->
        <property name="removeAbandoned"  value="true"/>
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->
        <property name="removeAbandonedTimeout" value="100"/>
        <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->
        <property name="maxWait" value="1000"/>
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="10"/>
        <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->
        <property name="minEvictableIdleTimeMillis" value="10000"/>
        <property name="validationQuery" value="SELECT NOW() FROM DUAL"/>
    </bean>

    <bean id="searchDataSource"
          class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://${db.stat}/search?useUnicode=true&amp;characterEncoding=gbk&amp;autoReconnect=true&amp;noAccessToProcedureBodies=true&amp;zeroDateTimeBehavior=convertToNull"/>
        <property name="username" value="coo8new"/>
        <property name="password" value="yhd,123"/>
        <!--maxActive: 最大连接数量-->
        <property name="maxActive" value="10"/>
        <!--minIdle: 最小空闲连接-->
        <property name="minIdle" value="2"/>
        <!--maxIdle: 最大空闲连接-->
        <property name="maxIdle" value="6"/>
        <!--initialSize: 初始化连接-->
        <property name="initialSize" value="2"/>
        <!-- 连接被泄露时是否打印 -->
        <property name="logAbandoned" value="true"/>
        <!--removeAbandoned: 是否自动回收超时连接-->
        <property name="removeAbandoned"  value="true"/>
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->
        <property name="removeAbandonedTimeout" value="100"/>
        <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->
        <property name="maxWait" value="1000"/>
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="10"/>
        <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->
        <property name="minEvictableIdleTimeMillis" value="10000"/>
        <property name="validationQuery" value="SELECT NOW() FROM DUAL"/>
    </bean>

    <!-- 配置SQLSession工厂 -->
    <bean id="b2cSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="b2cDataSource" />
        <property name="configLocation" value="classpath:config/core/mybatis-config.xml"></property>
        <property name="typeAliasesPackage" value="com.yao.search.biz.**.model.po" />
        <property name="mapperLocations" value="classpath*:com/yao/search/biz/core/dao/b2c/*Dao.xml"/>
    </bean>
    <bean id="statSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="statDataSource" />
        <property name="configLocation" value="classpath:config/core/mybatis-config.xml"></property>
        <property name="typeAliasesPackage" value="com.yao.search.biz.**.model.po" />
        <property name="mapperLocations" value="classpath*:com/yao/search/biz/core/dao/stat/*Dao.xml"/>
    </bean>
    <bean id="searchSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="searchDataSource" />
        <property name="configLocation" value="classpath:config/core/mybatis-config.xml"></property>
        <property name="typeAliasesPackage" value="com.yao.search.biz.**.model.po" />
        <property name="mapperLocations" value="classpath*:com/yao/search/biz/core/dao/search/*Dao.xml"/>
    </bean>

    <!-- SQL调用方式一：SQLSession模板
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean> -->

    <!-- SQL调用方式二：通过定义Mapper类，直接通过方法名调用sql -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yao.search.biz.**.dao.b2c.**"/>
        <property name="sqlSessionFactoryBeanName" value="b2cSqlSessionFactory"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yao.search.biz.**.dao.stat.**"/>
        <property name="sqlSessionFactoryBeanName" value="statSqlSessionFactory"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yao.search.biz.**.dao.search.**"/>
        <property name="sqlSessionFactoryBeanName" value="searchSqlSessionFactory"/>
    </bean>

    <!-- 使用JDBC事物 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource">
            <ref local="b2cDataSource"/>
        </property>
    </bean>

    <!-- AOP配置事物 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="query*" read-only="true" propagation="REQUIRED" />
            <tx:method name="delete*"  propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <!-- 配置AOP切面 -->
    <aop:config>
        <aop:pointcut id="transactionPointCut" expression="execution(* com.yao.search.biz..*.service.*.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointCut" advice-ref="transactionAdvice"/>
    </aop:config>

    <!-- 使用annotation注解方式配置事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

</beans>